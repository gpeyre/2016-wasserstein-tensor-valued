%%
% Test for matrix-valued densities.
% Need to implement a windowing estimator. 

addpath('toolbox/');
addpath('toolbox_quantum/');
addpath('data/textures/');

name = 'drygrass';
n0 = 128;
f = load_image(name, n0);

% window for estimation
n = 64;
w = sin( pi*(0:n-1)'/n ).^2; w = w*w';
% number of extracted window
q = 200;

T = zeros(3,3,n,n);
for it=1:q
    a = 1+floor(rand(2,1)*(n0-n));
    h = repmat(w, [1 1 3]) .* f(a(1):a(1)+n-1, a(2):a(2)+n-1,:);
    H = fft2(h);
    for i=1:3
        for j=1:3
            T(i,j,:,:) = T(i,j,:,:) + reshape(H(:,:,i) .* conj(H(:,:,j)), [1 1 n n]);
        end
    end
end
T = T/q;

% extract eigenvalues
S = zeros(n,n,3);
for i=1:n
    for j=1:n
        [u,s] = eig(T(:,:,i,j)); s = diag(s);
        S(i,j,:) = reshape( s, [1 1 3] ); 
    end
end

% S(1,1,:,:)=0;
% anisotropy ratio
A = ( S(:,:,3)-S(:,:,2) ) ./ ( S(:,:,3)+S(:,:,2) );

clf; 
subplot(3,1,1);
imagesc(fttshift(log(S(:,:,3))); colorbar;
title('log(Amplitude)');
subplot(3,1,1);
imagesc(fttshift(A)); colorbar;
title('Anisotropy');
subplot(3,1,1);
imagesc(fttshift(A)); colorbar;
title('Anisotropy');

imageplot())

return; 

d = 3; 
N = 128; 

X = randn(N,3);

% outer product
Xf = fft(X);
% Xf = Xf(1,:);
Cf = tensor_mult( reshape(permute(Xf, [2 1]), [3 1 N]), reshape(Xf', [1 3 N]) );
% Cf = abs( fft(C, [], 3) ).^2;

U = [];S = [];
for i=1:N
    [U(:,:,i), s] = eig(Cf(:,:,i)); 
    s = abs( real( diag(s) ) );
    [s,I] = sort(s); 
    S(:,i) = s; 
    U(:,:,i) = U(:,I,i);
end

